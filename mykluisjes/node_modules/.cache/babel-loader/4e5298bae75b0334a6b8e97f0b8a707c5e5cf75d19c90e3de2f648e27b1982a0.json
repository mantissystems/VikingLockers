{"ast":null,"code":"var _jsxFileName = \"/home/jozef/Desktop/venv/react/mykluisjes/src/components/ListItem.js\";\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Table } from 'reactstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet getTime = note => {\n  return new Date(note.updated).toLocaleDateString();\n};\nlet getTitle = note => {\n  //spit by new lines and just get the first line\n  //split will make a list of each line and will only pull on the first line by index zero\n  // const title = note.body.split('\\n')[0]\n  const title = note.location;\n  if (title.length > 45) {\n    return title.slice(0, 45);\n  }\n  return title;\n};\nlet getContent = note => {\n  //Get content after title\n  let title = getTitle(note);\n  let content = note.body.replaceAll('\\n', ' ');\n  content = content.replaceAll(title, '') + \"\\n\";\n  content = note.body;\n\n  //Slice content and add three dots in over 45 characters to show there is more\n  if (content.length > 45) {\n    // return content.slice(0, 45) + '...'\n    return /*#__PURE__*/_jsxDEV(Table, {\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: /*#__PURE__*/_jsxDEV(\"td\", {\n            children: \"content\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 16\n    }, this);\n  } else {\n    return content;\n  }\n};\nconst ListItem = _ref => {\n  let {\n    note\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(Link, {\n    to: `/note/${note.id}`,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"notes-list-item\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: getTitle(note)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: getTime(note)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 20\n        }, this), getContent(note)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n};\n_c = ListItem;\nexport default ListItem;\nvar _c;\n$RefreshReg$(_c, \"ListItem\");","map":{"version":3,"names":["React","Link","Table","getTime","note","Date","updated","toLocaleDateString","getTitle","title","location","length","slice","getContent","content","body","replaceAll","ListItem","id"],"sources":["/home/jozef/Desktop/venv/react/mykluisjes/src/components/ListItem.js"],"sourcesContent":["import React from 'react'\nimport { Link } from 'react-router-dom'\nimport {Table} from 'reactstrap'\n\n\nlet getTime = (note) => {\n    return new Date(note.updated).toLocaleDateString()\n}\n\nlet getTitle = (note) => {\n    //spit by new lines and just get the first line\n    //split will make a list of each line and will only pull on the first line by index zero\n    // const title = note.body.split('\\n')[0]\n    const title = note.location\n    if (title.length > 45) {\n        return title.slice(0, 45)\n    }\n    return title\n}\n\n\nlet getContent = (note) => {\n    //Get content after title\n    let title = getTitle(note)\n    let content = note.body.replaceAll('\\n', ' ')\n    content = content.replaceAll(title, '') +\"\\n\"\n    content=note.body\n\n    //Slice content and add three dots in over 45 characters to show there is more\n    if (content.length > 45) {\n        // return content.slice(0, 45) + '...'\n        return <Table>\n            <tbody>\n                <tr>\n                    <td>content</td>\n                </tr>\n            </tbody>\n        </Table>\n    } else {\n        return content\n    }\n\n}\n\n\nconst ListItem = ({ note }) => {\n    return (\n        <Link to={`/note/${note.id}`}>\n            <div className=\"notes-list-item\">\n                <h3>{getTitle(note)}</h3>\n                <p><span>{getTime(note)}</span>{getContent(note)}</p>\n            </div>\n        </Link>\n    )\n}\n\nexport default ListItem"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,IAAI,QAAQ,kBAAkB;AACvC,SAAQC,KAAK,QAAO,YAAY;AAAA;AAGhC,IAAIC,OAAO,GAAIC,IAAI,IAAK;EACpB,OAAO,IAAIC,IAAI,CAACD,IAAI,CAACE,OAAO,CAAC,CAACC,kBAAkB,EAAE;AACtD,CAAC;AAED,IAAIC,QAAQ,GAAIJ,IAAI,IAAK;EACrB;EACA;EACA;EACA,MAAMK,KAAK,GAAGL,IAAI,CAACM,QAAQ;EAC3B,IAAID,KAAK,CAACE,MAAM,GAAG,EAAE,EAAE;IACnB,OAAOF,KAAK,CAACG,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;EAC7B;EACA,OAAOH,KAAK;AAChB,CAAC;AAGD,IAAII,UAAU,GAAIT,IAAI,IAAK;EACvB;EACA,IAAIK,KAAK,GAAGD,QAAQ,CAACJ,IAAI,CAAC;EAC1B,IAAIU,OAAO,GAAGV,IAAI,CAACW,IAAI,CAACC,UAAU,CAAC,IAAI,EAAE,GAAG,CAAC;EAC7CF,OAAO,GAAGA,OAAO,CAACE,UAAU,CAACP,KAAK,EAAE,EAAE,CAAC,GAAE,IAAI;EAC7CK,OAAO,GAACV,IAAI,CAACW,IAAI;;EAEjB;EACA,IAAID,OAAO,CAACH,MAAM,GAAG,EAAE,EAAE;IACrB;IACA,oBAAO,QAAC,KAAK;MAAA,uBACT;QAAA,uBACI;UAAA,uBACI;YAAA,UAAI;UAAO;YAAA;YAAA;YAAA;UAAA;QAAK;UAAA;UAAA;UAAA;QAAA;MACf;QAAA;QAAA;QAAA;MAAA;IACD;MAAA;MAAA;MAAA;IAAA,QACJ;EACZ,CAAC,MAAM;IACH,OAAOG,OAAO;EAClB;AAEJ,CAAC;AAGD,MAAMG,QAAQ,GAAG,QAAc;EAAA,IAAb;IAAEb;EAAK,CAAC;EACtB,oBACI,QAAC,IAAI;IAAC,EAAE,EAAG,SAAQA,IAAI,CAACc,EAAG,EAAE;IAAA,uBACzB;MAAK,SAAS,EAAC,iBAAiB;MAAA,wBAC5B;QAAA,UAAKV,QAAQ,CAACJ,IAAI;MAAC;QAAA;QAAA;QAAA;MAAA,QAAM,eACzB;QAAA,wBAAG;UAAA,UAAOD,OAAO,CAACC,IAAI;QAAC;UAAA;UAAA;UAAA;QAAA,QAAQ,EAACS,UAAU,CAACT,IAAI,CAAC;MAAA;QAAA;QAAA;QAAA;MAAA,QAAK;IAAA;MAAA;MAAA;MAAA;IAAA;EACnD;IAAA;IAAA;IAAA;EAAA,QACH;AAEf,CAAC;AAAA,KATKa,QAAQ;AAWd,eAAeA,QAAQ;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}